!(function (e, t) {
    "object" == typeof exports && "object" == typeof module
        ? (module.exports = t())
        : "function" == typeof define && define.amd
        ? define([], t)
        : "object" == typeof exports
        ? (exports.browserInfo = t())
        : (e.browserInfo = t());
})(this, () =>
    (() => {
        "use strict";
        var e = {
                d: (t, r) => {
                    for (var n in r)
                        e.o(r, n) &&
                            !e.o(t, n) &&
                            Object.defineProperty(t, n, {
                                enumerable: !0,
                                get: r[n],
                            });
                },
                o: (e, t) => Object.prototype.hasOwnProperty.call(e, t),
                r: (e) => {
                    "undefined" != typeof Symbol &&
                        Symbol.toStringTag &&
                        Object.defineProperty(e, Symbol.toStringTag, {
                            value: "Module",
                        }),
                        Object.defineProperty(e, "__esModule", { value: !0 });
                },
            },
            t = {};
        function r() {
            try {
                var e = navigator.userAgent;
                return /Windows/i.test(e)
                    ? "Windows"
                    : /Macintosh|Mac OS X/i.test(e)
                    ? "Mac OS"
                    : /Android/i.test(e)
                    ? "Android"
                    : /iOS|iPhone|iPad|iPod/i.test(e)
                    ? "iOS"
                    : /Linux/i.test(e)
                    ? "Linux"
                    : "Unknown";
            } catch (e) {
                return "NA";
            }
        }
        function n() {
            try {
                return (function () {
                    var e = function (e) {
                        return e.test(window.navigator.userAgent);
                    };
                    switch (!0) {
                        case e(/edg/i):
                            return "MicrosoftEdge";
                        case e(/trident/i):
                            return "MicrosoftInternetExplorer";
                        case e(/firefox|fxios/i):
                            return "MozillaFirefox";
                        case e(/opr\//i):
                            return "Opera";
                        case e(/ucbrowser/i):
                            return "UCBrowser";
                        case e(/samsungbrowser/i):
                            return "SamsungBrowser";
                        case e(/chrome|crios/i):
                            return "GoogleChrome";
                        case e(/safari/i):
                            return "AppleSafari";
                        case e(/instagram/i):
                            return "Instagram";
                        case e(/FB/):
                            return "Facebook";
                        default:
                            return "Other";
                    }
                })();
            } catch (e) {
                return "NA";
            }
        }
        function o() {
            try {
                var e = !1;
                return (
                    (t =
                        navigator.userAgent ||
                        navigator.vendor ||
                        window.opera),
                    (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                        t
                    ) ||
                        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                            t.substr(0, 4)
                        )) &&
                        (e = !0),
                    e ? "Mobile" : "Desktop"
                );
            } catch (e) {
                return "NA";
            }
            var t;
        }
        function a() {
            try {
                var e = new Set();
                document.fonts.forEach(function (t) {
                    e.add(t.family);
                });
                var t = Array.from(e);
                return t.length ? t.toString() : "NA";
            } catch (e) {
                return "NA";
            }
        }
        function i() {
            try {
                var e = Array.from(navigator.plugins).map(function (e) {
                    return e.name;
                });
                return e.length ? e.toString() : "NA";
            } catch (e) {
                return "NA";
            }
        }
        function c() {
            try {
                return new Promise(function (e, t) {
                    "getBattery" in navigator
                        ? navigator
                              .getBattery()
                              .then(function (t) {
                                  var r = (
                                      (Math.round(100 * t.level) / 100) *
                                      100
                                  ).toFixed(2);
                                  e(r + "%");
                              })
                              .catch(function (t) {
                                  e("NA");
                              })
                        : e("NA");
                });
            } catch (e) {
                return "NA";
            }
        }
        function s() {
            try {
                if (window.WebGLRenderingContext) {
                    var e = document.createElement("canvas"),
                        t =
                            e.getContext("webgl") ||
                            e.getContext("experimental-webgl");
                    return t ? t.getParameter(t.RENDERER) : "NA";
                }
                return "NA";
            } catch (e) {
                return "NA";
            }
        }
        async function u() {
            try {
                let e,
                    t = document.cookie,
                    r = new TextEncoder().encode(t);
                try {
                    e = await crypto.subtle.digest("SHA-256", r);
                } catch (e) {
                    return "NA";
                }
                return Array.from(new Uint8Array(e))
                    .map((e) => e.toString(16).padStart(2, "0"))
                    .join("");
            } catch (e) {
                return "NA";
            }
        }
        function d() {
            try {
                if (null === localStorage.getItem("deviceHash")) {
                    const e = 64,
                        t = new Uint8Array(e);
                    crypto.getRandomValues(t);
                    let r = "";
                    for (let n = 0; n < e; n++) r += t[n] % 10;
                    localStorage.setItem("deviceHash", r);
                }
                return localStorage.getItem("deviceHash");
            } catch (e) {
                return "NA";
            }
        }
        async function l() {
            try {
                const e = navigator.userAgent;
                let t = e + navigator.language + navigator.platform,
                    r = new TextEncoder().encode(t),
                    n = await crypto.subtle.digest("SHA-256", r);
                return Array.from(new Uint8Array(n))
                    .map((e) => e.toString(16).padStart(2, "0"))
                    .join("");
            } catch (e) {
                return "NA";
            }
        }
        function m() {
            try {
                return new Promise(function (e, t) {
                    var r = n();
                    if ("AppleSafari" === r) {
                        if (void 0 === navigator.maxTouchPoints) {
                            var o = window.openDatabase,
                                a = window.localStorage;
                            try {
                                o(null, null, null, null);
                            } catch (t) {
                                return e("true");
                            }
                            try {
                                a.setItem("test", "1"), a.removeItem("test");
                            } catch (t) {
                                return e("true");
                            }
                            return e("false");
                        }
                        var i = String(Math.random());
                        try {
                            window.indexedDB.open(i, 1).onupgradeneeded =
                                function (t) {
                                    var r,
                                        n,
                                        o =
                                            null === (r = t.target) ||
                                            void 0 === r
                                                ? void 0
                                                : r.result;
                                    try {
                                        o
                                            .createObjectStore("test", {
                                                autoIncrement: !0,
                                            })
                                            .put(new Blob()),
                                            e("false");
                                    } catch (t) {
                                        var a = t;
                                        return (
                                            t instanceof Error &&
                                                (a =
                                                    null !== (n = t.message) &&
                                                    void 0 !== n
                                                        ? n
                                                        : t),
                                            e(
                                                "string" != typeof a
                                                    ? "false"
                                                    : "NA"
                                            )
                                        );
                                    } finally {
                                        o.close(),
                                            window.indexedDB.deleteDatabase(i);
                                    }
                                };
                        } catch (t) {
                            return e("false");
                        }
                    } else if ("GoogleChrome" === r)
                        if (
                            void 0 !== self.Promise &&
                            void 0 !== self.Promise.allSettled
                        )
                            try {
                                navigator.webkitTemporaryStorage.queryUsageAndQuota(
                                    function (t, r) {
                                        var n = Math.round(r / 1048576),
                                            o =
                                                void 0 !== window.performance &&
                                                void 0 !==
                                                    window.performance.memory &&
                                                void 0 !==
                                                    window.performance.memory
                                                        .jsHeapSizeLimit
                                                    ? performance.memory
                                                          .jsHeapSizeLimit
                                                    : 1073741824,
                                            a = 2 * Math.round(o / 1048576);
                                        e(n < a ? "true" : "false");
                                    },
                                    function (t) {
                                        e("NA");
                                    }
                                );
                            } catch (t) {
                                e("false");
                            }
                        else
                            try {
                                (
                                    window.webkitRequestFileSystem ||
                                    window.webkitRequestFileSystem
                                )(
                                    0,
                                    1,
                                    function () {
                                        e("false");
                                    },
                                    function () {
                                        e("true");
                                    }
                                );
                            } catch (t) {
                                e("false");
                            }
                    else
                        "MozillaFirefox" === r
                            ? void 0 === navigator.serviceWorker
                                ? e("true")
                                : e("false")
                            : "MicrosoftInternetExplorer" === r
                            ? void 0 === window.indexedDB
                                ? e("true")
                                : e("false")
                            : e("NA");
                });
            } catch (e) {
                return "NA";
            }
        }
        function g() {
            try {
                var e = navigator.userAgent;
                let t = "NA";
                return (
                    (t = /Windows/.test(e)
                        ? /Windows NT (\d+\.\d+)/.exec(e)[1]
                        : /Mac/.test(e)
                        ? /Mac OS X (\d+[\._]\d+(?:[\._]\d+)?)/
                              .exec(e)[1]
                              .replace(/_/g, ".")
                        : /Android/.test(e)
                        ? /Android (\d+\.\d+)/.exec(e)[1]
                        : /iOS/.test(e)
                        ? /OS (\d+_\d+(?:_\d+)?)/.exec(e)[1].replace(/_/g, ".")
                        : /Linux/.test(e)
                        ? "Linux"
                        : "NA"),
                    t
                );
            } catch (e) {
                return "NA";
            }
        }
        function f() {
            try {
                var e = navigator.userAgent;
                let t = "NA";
                return (
                    (t = /Chrome/.test(e)
                        ? /Chrome\/(\d+\.\d+)/.exec(e)[1]
                        : /Firefox/.test(e)
                        ? /Firefox\/(\d+\.\d+)/.exec(e)[1]
                        : /Safari/.test(e)
                        ? /Version\/(\d+\.\d+)/.exec(e)[1]
                        : /MSIE/.test(e)
                        ? /MSIE (\d+\.\d+)/.exec(e)[1]
                        : /Trident/.test(e)
                        ? /rv:(\d+\.\d+)/.exec(e)[1]
                        : "NA"),
                    t
                );
            } catch (e) {
                return "NA";
            }
        }
        function p() {
            try {
                var e = new Date().getTimezoneOffset(),
                    t = Math.floor(Math.abs(e) / 60),
                    r = Math.abs(e) % 60;
                return (
                    (e < 0 ? "+" : "-") +
                    t.toString().padStart(2, "0") +
                    ":" +
                    r.toString().padStart(2, "0")
                );
            } catch (e) {
                return "NA";
            }
        }
        function w() {
            try {
                return navigator.userAgent;
            } catch (e) {
                return "NA";
            }
        }
        function v() {
            try {
                return navigator.cookieEnabled.toString();
            } catch (e) {
                return "NA";
            }
        }
        function h() {
            try {
                return window.screen.width.toString();
            } catch (e) {
                return "NA";
            }
        }
        function y() {
            try {
                return window.screen.height.toString();
            } catch (e) {
                return "NA";
            }
        }
        function b() {
            try {
                return Intl.DateTimeFormat().resolvedOptions().timeZone;
            } catch (e) {
                return "NA";
            }
        }
        function A() {
            try {
                return navigator.language;
            } catch (e) {
                return "NA";
            }
        }
        async function x() {
            let e = {
                device_type: o(),
                device_hash: d(),
                os_name: r(),
                os_version: g(),
                user_agent: w(),
                browser_name: n(),
                browser_version: f(),
                cookie_enabled: v(),
                screen_width: h(),
                screen_height: y(),
                region_timezone: b(),
                region_timezone_offset: p(),
                region_language: A(),
                installed_fonts: a(),
                installed_plugins: i(),
                gpu_renderer: s(),
            };
            const [t, x, S, k] = await Promise.all([u(), l(), m(), c()]);
            return (
                (e = {
                    ...e,
                    session_id: t,
                    browser_hash: x,
                    private_mode: S,
                    battery_percentage: k,
                }),
                e
            );
        }
        e.r(t), e.d(t, { default: () => S, getBrowserData: () => x });
        const S = { getBrowserData: x };
        return t;
    })()
);
